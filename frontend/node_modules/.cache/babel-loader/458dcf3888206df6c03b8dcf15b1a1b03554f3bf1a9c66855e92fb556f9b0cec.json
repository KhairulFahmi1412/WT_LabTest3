{"ast":null,"code":"import { mapActions, mapGetters } from 'vuex';\nexport default {\n  data() {\n    return {\n      isEditMode: false,\n      // Local form data properties\n      formName: '',\n      formEmail: ''\n    };\n  },\n  computed: {\n    ...mapGetters(['users', 'currentUser'])\n  },\n  methods: {\n    ...mapActions(['fetchUsers', 'addUser', 'updateUser', 'deleteUser', 'setCurrentUser']),\n    onSubmit() {\n      const formData = {\n        id: this.currentUser.id,\n        // Keep the id from the current user\n        name: this.formName,\n        email: this.formEmail\n      };\n      if (this.isEditMode) {\n        this.updateUser(formData).then(() => {\n          this.resetForm();\n        });\n      } else {\n        this.addUser(formData).then(() => {\n          this.resetForm();\n        });\n      }\n    },\n    chooseUser(user) {\n      // Copy user details into local form data properties\n      this.formName = user.name;\n      this.formEmail = user.email;\n      this.setCurrentUser(user);\n      this.isEditMode = true;\n    },\n    resetForm() {\n      this.setCurrentUser({\n        id: null,\n        name: '',\n        email: ''\n      });\n      // Reset local form data properties\n      this.formName = '';\n      this.formEmail = '';\n      this.isEditMode = false;\n    }\n  },\n  created() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","data","isEditMode","formName","formEmail","computed","methods","onSubmit","formData","id","currentUser","name","email","updateUser","then","resetForm","addUser","chooseUser","user","setCurrentUser","created","fetchUsers"],"sources":["C:\\Users\\kaifa\\Desktop\\WT_LastLab\\frontend\\src\\components\\UserManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h2>User Form</h2>\r\n        <form @submit.prevent=\"onSubmit\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"name\" class=\"form-label\">Name:</label>\r\n            <input type=\"text\" v-model=\"formName\" class=\"form-control\" id=\"name\" required>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"email\" class=\"form-label\">Email:</label>\r\n            <input type=\"email\" v-model=\"formEmail\" class=\"form-control\" id=\"email\" required>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-success me-2\">Save</button>\r\n          <button type=\"button\" @click=\"updateUserDetails\" class=\"btn btn-primary\">Update</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <h2>List of Users</h2>\r\n        <ul class=\"list-group\">\r\n   <li v-for=\"user in users\" :key=\"user.id\" class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n  <div>\r\n    <h5>{{ user.name }}</h5>\r\n    <p>{{ user.email }}</p>\r\n  </div>\r\n  <div class=\"d-flex flex-column\">\r\n    <button @click=\"chooseUser(user)\" class=\"btn btn-primary mb-2\">Choose</button>\r\n    <button @click=\"deleteUser(user.id)\" class=\"btn btn-danger mt-2\">Remove</button>\r\n  </div>\r\n</li>\r\n\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isEditMode: false,\r\n      // Local form data properties\r\n      formName: '',\r\n      formEmail: '',\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['users', 'currentUser'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchUsers', 'addUser', 'updateUser', 'deleteUser', 'setCurrentUser']),\r\n    onSubmit() {\r\n      const formData = {\r\n        id: this.currentUser.id, // Keep the id from the current user\r\n        name: this.formName,\r\n        email: this.formEmail,\r\n      };\r\n      if (this.isEditMode) {\r\n        this.updateUser(formData).then(() => {\r\n          this.resetForm()\r\n        })\r\n      } else {\r\n        this.addUser(formData).then(() => {\r\n          this.resetForm()\r\n        })\r\n      }\r\n    },\r\n    chooseUser(user) {\r\n      // Copy user details into local form data properties\r\n      this.formName = user.name;\r\n      this.formEmail = user.email;\r\n      this.setCurrentUser(user);\r\n      this.isEditMode = true;\r\n    },\r\n    resetForm() {\r\n      this.setCurrentUser({ id: null, name: '', email: '' });\r\n      // Reset local form data properties\r\n      this.formName = '';\r\n      this.formEmail = '';\r\n      this.isEditMode = false;\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchUsers()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Style remains unchanged */\r\n</style>"],"mappings":"AAuCA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAK;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,KAAK;MACjB;MACAC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGL,UAAU,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC;EACxC,CAAC;EACDM,OAAO,EAAE;IACP,GAAGP,UAAU,CAAC,CAAC,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;IACtFQ,QAAQA,CAAA,EAAG;MACT,MAAMC,QAAO,GAAI;QACfC,EAAE,EAAE,IAAI,CAACC,WAAW,CAACD,EAAE;QAAE;QACzBE,IAAI,EAAE,IAAI,CAACR,QAAQ;QACnBS,KAAK,EAAE,IAAI,CAACR;MACd,CAAC;MACD,IAAI,IAAI,CAACF,UAAU,EAAE;QACnB,IAAI,CAACW,UAAU,CAACL,QAAQ,CAAC,CAACM,IAAI,CAAC,MAAM;UACnC,IAAI,CAACC,SAAS,CAAC;QACjB,CAAC;MACH,OAAO;QACL,IAAI,CAACC,OAAO,CAACR,QAAQ,CAAC,CAACM,IAAI,CAAC,MAAM;UAChC,IAAI,CAACC,SAAS,CAAC;QACjB,CAAC;MACH;IACF,CAAC;IACDE,UAAUA,CAACC,IAAI,EAAE;MACf;MACA,IAAI,CAACf,QAAO,GAAIe,IAAI,CAACP,IAAI;MACzB,IAAI,CAACP,SAAQ,GAAIc,IAAI,CAACN,KAAK;MAC3B,IAAI,CAACO,cAAc,CAACD,IAAI,CAAC;MACzB,IAAI,CAAChB,UAAS,GAAI,IAAI;IACxB,CAAC;IACDa,SAASA,CAAA,EAAG;MACV,IAAI,CAACI,cAAc,CAAC;QAAEV,EAAE,EAAE,IAAI;QAAEE,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;MACtD;MACA,IAAI,CAACT,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACF,UAAS,GAAI,KAAK;IACzB;EACF,CAAC;EACDkB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}