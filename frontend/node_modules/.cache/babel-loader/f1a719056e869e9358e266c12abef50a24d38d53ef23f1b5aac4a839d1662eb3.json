{"ast":null,"code":"import { mapActions, mapGetters } from 'vuex';\nexport default {\n  data() {\n    return {\n      formName: '',\n      formEmail: '',\n      isEditMode: false,\n      editingUserId: null\n    };\n  },\n  computed: {\n    ...mapGetters(['users', 'currentUser'])\n  },\n  methods: {\n    ...mapActions(['fetchUsers', 'addUser', 'updateUser', 'deleteUser', 'setCurrentUser']),\n    onSubmit() {\n      // Step 1: Add a new user\n      this.addUser({\n        name: this.formName,\n        email: this.formEmail\n      }).then(() => {\n        // Step 2: Make the input fields blank\n        this.formName = '';\n        this.formEmail = '';\n\n        // Step 3: Make the selected user blank again\n        // Assuming setCurrentUser can reset the selected user when passed a specific value\n        this.setCurrentUser({\n          id: null,\n          name: '',\n          email: ''\n        });\n\n        // If there's additional logic to reset the edit mode or similar, add it here\n        this.isEditMode = false; // If you're tracking whether you're in edit mode\n      });\n    },\n    updateUserDetails() {\n      // Check if either the name or email is empty\n      if (!this.formName.trim() || !this.formEmail.trim()) {\n        // Display a popup alert if either is empty\n        alert('Both name and email must be provided.');\n        return; // Exit the function to prevent further execution\n      }\n\n      // Proceed with the update if both fields are filled\n      if (this.isEditMode) {\n        this.updateUser({\n          id: this.editingUserId,\n          name: this.formName,\n          email: this.formEmail\n        }).then(() => {\n          this.resetForm();\n        });\n      }\n    },\n    chooseUser(user) {\n      this.editingUserId = user.id;\n      this.formName = user.name;\n      this.formEmail = user.email;\n      this.isEditMode = true;\n    },\n    resetForm() {\n      this.editingUserId = null;\n      this.formName = '';\n      this.formEmail = '';\n      this.isEditMode = false;\n    }\n  },\n  created() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","data","formName","formEmail","isEditMode","editingUserId","computed","methods","onSubmit","addUser","name","email","then","setCurrentUser","id","updateUserDetails","trim","alert","updateUser","resetForm","chooseUser","user","created","fetchUsers"],"sources":["C:\\Users\\kaifa\\Desktop\\WT_LastLab\\frontend\\src\\components\\UserManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h2>User Form</h2>\r\n        <form @submit.prevent=\"onSubmit\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"name\" class=\"form-label\">Name:</label>\r\n            <input type=\"text\" v-model=\"formName\" class=\"form-control\" id=\"name\" required>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"email\" class=\"form-label\">Email:</label>\r\n            <input type=\"email\" v-model=\"formEmail\" class=\"form-control\" id=\"email\" required>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-success me-2\">Save</button>\r\n          <button type=\"button\" @click=\"updateUserDetails\" class=\"btn btn-primary\">Update</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <h2>List of Users</h2>\r\n        <ul class=\"list-group\">\r\n   <li v-for=\"user in users\" :key=\"user.id\" class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n  <div>\r\n    <h5>{{ user.name }}</h5>\r\n    <p>{{ user.email }}</p>\r\n  </div>\r\n  <div class=\"d-flex flex-column\">\r\n    <button @click=\"chooseUser(user)\" class=\"btn btn-primary mb-2\">Choose</button>\r\n    <button @click=\"deleteUser(user.id)\" class=\"btn btn-danger mt-2\">Remove</button>\r\n  </div>\r\n</li>\r\n\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      formName: '',\r\n      formEmail: '',\r\n      isEditMode: false,\r\n      editingUserId: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['users', 'currentUser'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchUsers', 'addUser', 'updateUser', 'deleteUser', 'setCurrentUser']),\r\n    onSubmit() {\r\n    // Step 1: Add a new user\r\n    this.addUser({\r\n      name: this.formName,\r\n      email: this.formEmail\r\n    }).then(() => {\r\n      // Step 2: Make the input fields blank\r\n      this.formName = '';\r\n      this.formEmail = '';\r\n      \r\n      // Step 3: Make the selected user blank again\r\n      // Assuming setCurrentUser can reset the selected user when passed a specific value\r\n      this.setCurrentUser({ id: null, name: '', email: '' });\r\n      \r\n      // If there's additional logic to reset the edit mode or similar, add it here\r\n      this.isEditMode = false; // If you're tracking whether you're in edit mode\r\n    });\r\n  },\r\nupdateUserDetails() {\r\n  // Check if either the name or email is empty\r\n  if (!this.formName.trim() || !this.formEmail.trim()) {\r\n    // Display a popup alert if either is empty\r\n    alert('Both name and email must be provided.');\r\n    return; // Exit the function to prevent further execution\r\n  }\r\n\r\n  // Proceed with the update if both fields are filled\r\n  if (this.isEditMode) {\r\n    this.updateUser({ id: this.editingUserId, name: this.formName, email: this.formEmail }).then(() => {\r\n      this.resetForm();\r\n    });\r\n  }\r\n},\r\n    chooseUser(user) {\r\n      this.editingUserId = user.id;\r\n      this.formName = user.name;\r\n      this.formEmail = user.email;\r\n      this.isEditMode = true;\r\n    },\r\n    resetForm() {\r\n      this.editingUserId = null;\r\n      this.formName = '';\r\n      this.formEmail = '';\r\n      this.isEditMode = false;\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchUsers()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Style remains unchanged */\r\n</style>"],"mappings":"AAuCA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAK;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,KAAK;MACjBC,aAAa,EAAE;IACjB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,UAAU,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC;EACxC,CAAC;EACDO,OAAO,EAAE;IACP,GAAGR,UAAU,CAAC,CAAC,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;IACtFS,QAAQA,CAAA,EAAG;MACX;MACA,IAAI,CAACC,OAAO,CAAC;QACXC,IAAI,EAAE,IAAI,CAACR,QAAQ;QACnBS,KAAK,EAAE,IAAI,CAACR;MACd,CAAC,CAAC,CAACS,IAAI,CAAC,MAAM;QACZ;QACA,IAAI,CAACV,QAAO,GAAI,EAAE;QAClB,IAAI,CAACC,SAAQ,GAAI,EAAE;;QAEnB;QACA;QACA,IAAI,CAACU,cAAc,CAAC;UAAEC,EAAE,EAAE,IAAI;UAAEJ,IAAI,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAG,CAAC,CAAC;;QAEtD;QACA,IAAI,CAACP,UAAS,GAAI,KAAK,EAAE;MAC3B,CAAC,CAAC;IACJ,CAAC;IACHW,iBAAiBA,CAAA,EAAG;MAClB;MACA,IAAI,CAAC,IAAI,CAACb,QAAQ,CAACc,IAAI,CAAC,KAAK,CAAC,IAAI,CAACb,SAAS,CAACa,IAAI,CAAC,CAAC,EAAE;QACnD;QACAC,KAAK,CAAC,uCAAuC,CAAC;QAC9C,OAAM,CAAE;MACV;;MAEA;MACA,IAAI,IAAI,CAACb,UAAU,EAAE;QACnB,IAAI,CAACc,UAAU,CAAC;UAAEJ,EAAE,EAAE,IAAI,CAACT,aAAa;UAAEK,IAAI,EAAE,IAAI,CAACR,QAAQ;UAAES,KAAK,EAAE,IAAI,CAACR;QAAU,CAAC,CAAC,CAACS,IAAI,CAAC,MAAM;UACjG,IAAI,CAACO,SAAS,CAAC,CAAC;QAClB,CAAC,CAAC;MACJ;IACF,CAAC;IACGC,UAAUA,CAACC,IAAI,EAAE;MACf,IAAI,CAAChB,aAAY,GAAIgB,IAAI,CAACP,EAAE;MAC5B,IAAI,CAACZ,QAAO,GAAImB,IAAI,CAACX,IAAI;MACzB,IAAI,CAACP,SAAQ,GAAIkB,IAAI,CAACV,KAAK;MAC3B,IAAI,CAACP,UAAS,GAAI,IAAI;IACxB,CAAC;IACDe,SAASA,CAAA,EAAG;MACV,IAAI,CAACd,aAAY,GAAI,IAAI;MACzB,IAAI,CAACH,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACC,UAAS,GAAI,KAAK;IACzB;EACF,CAAC;EACDkB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}